/// Media query manager (widths).
///
/// @param {string} $breakpoint1 - First breakpoint
/// @param {string} $breakpoint2 [null] - Second breakpoint
/// @example
///   @include mq(sm) {
///       font-size: 1.5em;
///   }
/// @example
///   @include mq(md-max) {
///       // Put styling here, that will be applied when the width of the browser window
///       // is less than the width of "md" (which probably means under 992px)
///   }
/// @example
///   @include mq(sm, md-max) {
///       // Put styling here, that will be applied when the width of the browser window
///       // is more than or equal to the width of "sm" and less than that of "md".
///       // This probably means a width between (and including) 768px and 991px.
///   }
/// @requires {variable} $widthBreakpoints
/// @output A media-query with a min-width or a max-width.
@mixin mq($breakpoint1, $breakpoint2: null) {
    $sizeString1: get-breakpoint($breakpoint1);
    $sizeString2: "";

    @if $breakpoint2 {
        @if (
            (str-index($breakpoint1, "max") == null and str-index($breakpoint2, "max") != null) or
                (str-index($breakpoint1, "max") != null and str-index($breakpoint2, "max") == null)
        ) {
            $sizeString2: get-breakpoint($breakpoint2);

            @if $sizeString2 {
                $sizeString2: " and #{$sizeString2}";
            }
        } @else {
            @warn "It makes no sense to have two `min-width` or two `max-width` in the same media-quiery.";
        }
    }

    @if $sizeString1 {
        @media #{$sizeString1 + $sizeString2} {
            @content;
        }
    }
}

/// Media query manager (heights).
///
/// @param {string} $breakpoint1 - First breakpoint
/// @param {string} $breakpoint2 [null] - Second breakpoint
/// @example
///   @include mq-height(sm) {
///       font-size: 1.5em;
///   }
/// @example
///   @include mq-height(md-max) {
///       // Put styling here, that will be applied when the height of the browser window
///       // is less than the height of "md" (which probably means under 992px)
///   }
/// @example
///   @include mq-height(sm, md-max) {
///       // Put styling here, that will be applied when the height of the browser window
///       // is more than or equal to the height of "sm" and less than that of "md".
///       // This probably means a height between (and including) 768px and 991px.
///   }
/// @requires {variable} $heightBreakpoints
/// @output A media-query with a min-height or a max-height.
@mixin mq-height($breakpoint1, $breakpoint2: null) {
    $sizeString1: get-breakpoint($breakpoint1, height);
    $sizeString2: "";

    @if $breakpoint2 {
        @if (
            (str-index($breakpoint1, "max") == null and str-index($breakpoint2, "max") != null) or
                (str-index($breakpoint1, "max") != null and str-index($breakpoint2, "max") == null)
        ) {
            $sizeString2: get-breakpoint($breakpoint2, height);

            @if $sizeString2 {
                $sizeString2: " and #{$sizeString2}";
            }
        } @else {
            @warn "It makes no sense to have two `min-height` or two `max-height` in the same media-quiery.";
        }
    }

    @if $sizeString1 {
        @media #{$sizeString1 + $sizeString2} {
            @content;
        }
    }
}

@function is-length($value) {
    @return type-of($value) != "null" and
        (
            str-slice($value + "", 1, 4) == "calc" or index(auto inherit initial 0, $value) or
                type-of($value) == "number" and not unitless($value)
        );
}

@function unpack($shorthand) {
    @if length($shorthand) == 1 {
        @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
    } @else if length($shorthand) == 2 {
        @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
    } @else if length($shorthand) == 3 {
        @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
    } @else {
        @return $shorthand;
    }
}
